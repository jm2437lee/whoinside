"use client";

declare global {
  interface Window {
    Kakao: any;
  }
}
import * as React from "react";
import { calculateResult } from "@/app/lib/calculateResult";
import { ResultActions } from "@/components/ResultActions";
import { Button } from "@/components/ui/button";
import Script from "next/script";
import KakaoShareButton from "@/components/KakaoShareButton";
import NicknameModal from "@/components/NicknameModal";
import { Users } from "lucide-react"; // ÏïÑÏù¥ÏΩò ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏÇ¨Ïö©
import compatibilityDescriptions from "@/data/compatibilityDescriptions.json";
import Image from "next/image";
import { Suspense } from "react";
import { SearchParamsHandler } from "@/components/SearchParamsHandler";
import Head from "next/head";
import { motion } from "framer-motion";

const reactionGifs: Record<string, { img: string }> = {
  A1: { img: "/gifs/a1.png" },
  A2: { img: "/gifs/a2.png" },
  B1: { img: "/gifs/b1.png" },
  B2: { img: "/gifs/b2.png" },
  C1: { img: "/gifs/c1.png" },
  C2: { img: "/gifs/c2.png" },
  D1: { img: "/gifs/d1.png" },
  D2: { img: "/gifs/d2.png" },
};

export default function ResultPage() {
  const [result, setResult] = React.useState<any>(null);
  const [showModal, setShowModal] = React.useState(false);
  const [fromInfo, setFromInfo] = React.useState<{
    from: string;
    fromType: string;
    fromNickname: string;
  } | null>(null);
  const [compatibility, setCompatibility] = React.useState<any>(null);
  const [nickname, setNickname] = React.useState("");
  const [relationSaved, setRelationSaved] = React.useState(false);
  const [isLoading, setIsLoading] = React.useState(false);
  const [pendingShareType, setPendingShareType] = React.useState<
    "kakao" | "link" | "twitter" | "instagram" | null
  >(null);

  const openModal = () => setShowModal(true);
  const closeModal = () => setShowModal(false);

  const uuid =
    typeof window !== "undefined" ? localStorage.getItem("uuid") : null;

  const handleKakaoShare = (nickname: string) => {
    if (typeof window === "undefined" || !window.Kakao) {
      console.error("Kakao SDK not loaded");
      return;
    }

    const uuid = localStorage.getItem("uuid") || "anonymous";
    const shareUrl = `${
      process.env.NEXT_PUBLIC_DOMAIN_URL
    }/?from=${uuid}&type=${result?.type}&nickname=${encodeURIComponent(
      nickname
    )}`;

    try {
      window.Kakao.Share.sendDefault({
        objectType: "feed",
        content: {
          title: `ÎÇòÏùò Í∞êÏ†ï ÏÑ±Ìñ•, Í∂ÅÍ∏àÌïòÏßÄ ÏïäÏïÑ? ${nickname}Í≥ºÏùò Í∂ÅÌï©ÎèÑ ÌôïÏù∏Ìï¥Î¥ê`,
          description: "ÎÇòÏôÄ ÎÑàÏùò Í∞êÏ†ï ÏÑ±Ìñ• Ïö∞Î¶¨ Í∂ÅÌï©ÏùÄ ÏñºÎßàÎÇò Ïûò ÎßûÏùÑÍπå? üëÄ",
          imageUrl: `${process.env.NEXT_PUBLIC_DOMAIN_URL}/main.png`,
          link: { mobileWebUrl: shareUrl, webUrl: shareUrl },
        },
        buttons: [
          {
            title: "ÎÇòÎèÑ ÌÖåÏä§Ìä∏ÌïòÎü¨ Í∞ÄÍ∏∞",
            link: { mobileWebUrl: shareUrl, webUrl: shareUrl },
          },
        ],
      });
    } catch (error) {
      console.error("Kakao share error:", error);
    }
  };

  const openToast = (text: string) => {
    const toast = document.createElement("div");
    toast.className =
      "fixed top-4 left-1/2 -translate-x-1/2 bg-black/80 text-white px-4 py-2 rounded-lg z-[9999]";
    toast.textContent = text;
    document.body.appendChild(toast);
    setTimeout(() => {
      toast.remove();
    }, 3000);
  };

  const handleShare = (
    type: "kakao" | "link" | "twitter" | "instagram",
    forceNickname?: string
  ) => {
    const currentNickname = forceNickname || nickname;
    if (!currentNickname) {
      setShowModal(true);
      return;
    }

    const uuid = localStorage.getItem("uuid") || "anonymous";
    const shareUrl = `${
      process.env.NEXT_PUBLIC_DOMAIN_URL
    }/?from=${uuid}&type=${result?.type}&nickname=${encodeURIComponent(
      currentNickname
    )}`;

    switch (type) {
      case "kakao":
        handleKakaoShare(currentNickname);
        break;
      case "link":
        navigator.clipboard.writeText(shareUrl);
        openToast("ÎßÅÌÅ¨Í∞Ä Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§");
        break;
      case "twitter":
        const twitterText = `ÎÇòÏùò Í∞êÏ†ï ÏÑ±Ìñ•: ${result.nickname}\n${result.tmi}\n\nÏπúÍµ¨Îì§Í≥º Í∂ÅÌï©ÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî!`;
        window.open(
          `https://twitter.com/intent/tweet?text=${encodeURIComponent(
            twitterText
          )}&url=${encodeURIComponent(shareUrl)}`,
          "_blank"
        );
        break;
      case "instagram":
        // Î™®Î∞îÏùº Í∏∞Í∏∞ Ï≤¥ÌÅ¨
        const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);

        if (isMobile) {
          // Î™®Î∞îÏùºÏóêÏÑúÎäî Instagram Ïï±ÏúºÎ°ú Ïù¥Îèô ÏãúÎèÑ
          window.location.href = `instagram://story-camera`;

          // Ïï±Ïù¥ Ïã§ÌñâÎêòÏßÄ ÏïäÏùÑ Í≤ΩÏö∞Î•º ÎåÄÎπÑÌï¥ ÏãúÍ∞Ñ ÏßÄÏó∞ ÌõÑ ÏïåÎ¶º
          setTimeout(() => {
            alert(
              "Instagram Ïï±Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§. ÎßÅÌÅ¨Î•º Î≥µÏÇ¨ÌïòÏó¨ ÏßÅÏ†ë Í≥µÏú†Ìï¥Ï£ºÏÑ∏Ïöî."
            );
            navigator.clipboard.writeText(shareUrl);
            openToast("ÎßÅÌÅ¨Í∞Ä Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§");
          }, 500);
        } else {
          // Îç∞Ïä§ÌÅ¨ÌÜ±ÏóêÏÑúÎäî Î∞îÎ°ú ÏïåÎ¶º
          alert(
            "Instagram Í≥µÏú†Îäî Î™®Î∞îÏùº Ïï±ÏóêÏÑúÎßå Í∞ÄÎä•Ìï©ÎãàÎã§. ÎßÅÌÅ¨Î•º Î≥µÏÇ¨ÌïòÏó¨ ÏßÅÏ†ë Í≥µÏú†Ìï¥Ï£ºÏÑ∏Ïöî."
          );
          navigator.clipboard.writeText(shareUrl);
          openToast("ÎßÅÌÅ¨Í∞Ä Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§");
        }
        break;
    }
  };

  // 1. Í≥µÏú†Î∞õÏßÄ ÏïäÏùÄ Í≤ΩÏö∞Ïùò Í≥µÏú†Î≤ÑÌäº ÌÅ¥Î¶≠ -> ÎãâÎÑ§ÏûÑ ÏûÖÎ†• -> Ïú†Ï†ÄÏ†ïÎ≥¥ Ï†ÄÏû• -> Í∞Å ÌîåÎû´ÌèºÎ≥Ñ Í≥µÏú†
  const confirmNicknameAndShare = async (
    nicknameInput: string,
    shareType: "kakao" | "link" | "twitter" | "instagram"
  ) => {
    const type = result?.type;
    setIsLoading(true);
    try {
      // Ïú†Ï†ÄÏ†ïÎ≥¥Îßå Ï†ÄÏû•
      await fetch("/api/user", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ uuid, nickname: nicknameInput, type }),
      });

      setNickname(nicknameInput);
      localStorage.setItem("myNickname", nicknameInput); // ÎãâÎÑ§ÏûÑÏùÑ localStorageÏóê Ï†ÄÏû•
      closeModal();

      // Í∞Å ÌîåÎû´ÌèºÎ≥Ñ Í≥µÏú† Î°úÏßÅ Ïã§Ìñâ
      handleShare(shareType, nicknameInput);
    } catch (error) {
      console.error("Error saving user:", error);
    } finally {
      setIsLoading(false);
    }
  };

  // 2. Í≥µÏú†Î∞õÏùÄ Í≤ΩÏö∞Ïùò ÎãâÎÑ§ÏûÑ ÏûÖÎ†• -> Ïú†Ï†ÄÏ†ïÎ≥¥ Ï†ÄÏû• + Í¥ÄÍ≥ÑÏ†ïÎ≥¥ Ï†ÄÏû•
  const confirmNickname = async (nicknameInput: string) => {
    const type = result?.type;
    const from = localStorage.getItem("from");
    const myUuid = localStorage.getItem("uuid");

    setIsLoading(true);
    try {
      // Ïú†Ï†ÄÏ†ïÎ≥¥ Ï†ÄÏû•
      await fetch("/api/user", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ uuid: myUuid, nickname: nicknameInput, type }),
      });

      // Í¥ÄÍ≥ÑÏ†ïÎ≥¥ Ï†ÄÏû• (ÎãâÎÑ§ÏûÑÎèÑ Ìï®Íªò Ï†ÑÎã¨)
      if (from && myUuid) {
        await fetch("/api/relation", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            fromUuid: from,
            toUuid: myUuid,
            myNickname: nicknameInput,
          }),
        });
      }

      setNickname(nicknameInput);
      localStorage.setItem("myNickname", nicknameInput);
      closeModal();
    } catch (error) {
      console.error("Error:", error);
    } finally {
      setIsLoading(false);
    }
  };

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Í≥µÏú† Ïó¨Î∂Ä Ï≤¥ÌÅ¨ Î∞è Ï¥àÍ∏∞ ÏÑ§Ï†ï
  React.useEffect(() => {
    if (typeof window !== "undefined") {
      // UUID ÏÉùÏÑ±
      const uuid = crypto.randomUUID();
      localStorage.setItem("uuid", uuid);

      // Í≤∞Í≥º Í≥ÑÏÇ∞ Î∞è ÏÑ§Ï†ï
      const answers: string[] = [];
      for (let i = 1; i <= 10; i++) {
        const value = localStorage.getItem(`Q${i}`);
        if (value) answers.push(value);
      }
      if (answers.length === 10) {
        const { type, title, description, tmi, nickname, advice } =
          calculateResult(answers);
        setResult({ type, title, description, tmi, nickname, advice });
      }
    }
  }, []);

  // Í≥µÏú†Î∞õÏùÄ Í≤ΩÏö∞ fromInfo ÏÑ§Ï†ï
  React.useEffect(() => {
    const from = localStorage.getItem("from");
    const fromType = localStorage.getItem("fromType");
    const fromNickname = localStorage.getItem("fromNickname");
    const savedNickname = localStorage.getItem("myNickname"); // Ï†ÄÏû•Îêú ÎãâÎÑ§ÏûÑ ÌôïÏù∏

    if (from && fromType && fromNickname && result) {
      setFromInfo({
        from,
        fromType,
        fromNickname: decodeURIComponent(fromNickname),
      });

      // Ï†ÄÏû•Îêú ÎãâÎÑ§ÏûÑÏù¥ ÏûàÏúºÎ©¥ ÏÑ§Ï†ïÌïòÍ≥†, ÏóÜÏúºÎ©¥ Î™®Îã¨ ÌëúÏãú
      if (savedNickname) {
        setNickname(savedNickname);
      } else {
        setShowModal(true);
      }

      // Í∂ÅÌï© Ï†ïÎ≥¥ ÏÑ§Ï†ï
      const myType = result.type;
      const matchKey = `${fromType}_${myType}`;
      const reverseMatchKey = `${myType}_${fromType}`;
      const comp =
        compatibilityDescriptions[
          matchKey as keyof typeof compatibilityDescriptions
        ] ||
        compatibilityDescriptions[
          reverseMatchKey as keyof typeof compatibilityDescriptions
        ];

      if (comp) {
        setCompatibility(comp);
      }
    }
  }, [result]);

  // Ïπ¥Ïπ¥Ïò§ SDK Ï¥àÍ∏∞ÌôîÎ•º ÏúÑÌïú useEffect Ï∂îÍ∞Ä
  React.useEffect(() => {
    const script = document.createElement("script");
    script.src = "https://developers.kakao.com/sdk/js/kakao.js";
    script.async = true;
    script.onload = () => {
      if (window.Kakao && !window.Kakao.isInitialized()) {
        window.Kakao.init("47e9e842805216474700f75e72891072");
      }
    };
    document.head.appendChild(script);
    return () => {
      document.head.removeChild(script);
    };
  }, []);

  React.useEffect(() => {
    if (typeof window !== "undefined" && result) {
      // ÎèôÏ†ÅÏúºÎ°ú Î©îÌÉÄ ÌÉúÍ∑∏ ÏóÖÎç∞Ïù¥Ìä∏
      const updateMetaTags = () => {
        const title = `${result.nickname} - Í∞êÏ†ï ÏÑ±Ìñ• ÌÖåÏä§Ìä∏ Í≤∞Í≥º`;
        const description = `${result.tmi} | ÎÇòÏôÄ ÎÑàÏùò Í∞êÏ†ï ÏÑ±Ìñ• Í∂ÅÌï©ÏùÄ ÏñºÎßàÎÇò Ïûò ÎßûÏùÑÍπå? üëÄ`;

        // Í∏∞Ï°¥ Î©îÌÉÄ ÌÉúÍ∑∏ ÏóÖÎç∞Ïù¥Ìä∏
        document.title = title;

        // OpenGraph Î©îÌÉÄ ÌÉúÍ∑∏ ÏóÖÎç∞Ïù¥Ìä∏
        const metaTags = {
          "og:title": title,
          "og:description": description,
          "og:image": `${process.env.NEXT_PUBLIC_DOMAIN_URL}/main.png`,
          "og:url": window.location.href,
          "twitter:title": title,
          "twitter:description": description,
          "twitter:image": `${process.env.NEXT_PUBLIC_DOMAIN_URL}/main.png`,
        };

        Object.entries(metaTags).forEach(([property, content]) => {
          let meta = document.querySelector(`meta[property="${property}"]`);
          if (!meta) {
            meta = document.createElement("meta");
            meta.setAttribute("property", property);
            document.head.appendChild(meta);
          }
          meta.setAttribute("content", content);
        });
      };

      updateMetaTags();
    }
  }, [result]);

  if (!result)
    return (
      <div className="min-h-screen bg-gradient-to-b from-purple-50 to-white flex items-center justify-center">
        <div className="w-16 h-16 border-4 border-purple-600 border-t-transparent rounded-full animate-spin"></div>
      </div>
    );

  const reaction = reactionGifs[result.type];

  return (
    <main className="min-h-screen bg-gradient-to-b from-purple-50 to-white">
      <Suspense>
        <SearchParamsHandler />
      </Suspense>
      <div className="max-w-4xl mx-auto px-6 py-12">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl p-8 space-y-8"
        >
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.3, duration: 0.5 }}
            className="text-center space-y-4"
          >
            <h1 className="text-[20px] font-bold text-gray-700">
              <span className="align-middle">ÎãπÏã†Ïùò Í∞êÏ†ï ÏÑ±Ìñ•ÏùÄ:</span>
              <br />
              <motion.strong
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.6, duration: 0.5 }}
                className="text-4xl text-purple-600 inline-block mt-2"
              >
                {result.nickname}
              </motion.strong>
            </h1>
            <motion.p
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.9, duration: 0.5 }}
              className="text-purple-600 italic"
            >
              {result.tmi}
            </motion.p>
          </motion.div>

          {reaction && (
            <motion.div
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 1.2, duration: 0.5 }}
              className="flex flex-col items-center gap-4"
            >
              <div className="relative w-full max-w-xs mx-auto flex justify-center">
                <div className="absolute inset-0 bg-purple-200 rounded-xl blur-xl opacity-20"></div>
                <Image
                  src={reaction.img}
                  alt="ÏÑ±Ìñ• Î∞òÏùë Ïù¥ÎØ∏ÏßÄ"
                  width={300}
                  height={300}
                  className="relative rounded-xl shadow-lg hover:scale-105 transition-transform duration-300"
                  priority
                />
              </div>
            </motion.div>
          )}

          <motion.p
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 1.5, duration: 0.5 }}
            className="text-gray-700 text-lg text-center leading-relaxed"
          >
            {result.description}
          </motion.p>

          {/* ‚ú® Ï°∞Ïñ∏ Ïπ¥Îìú (Î∞∞Ïó¥Ìòï) */}
          {Array.isArray(result.advice) && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 1.8, duration: 0.5 }}
              className="mt-8 p-6 rounded-xl bg-gradient-to-br from-purple-50 to-purple-100 shadow-inner space-y-4"
            >
              <h3 className="text-2xl font-bold text-purple-700 text-center">
                ‚ú® ÌòÑÏã§ Ï°∞Ïñ∏ Ïπ¥Îìú
              </h3>
              <ul className="list-none space-y-4">
                {result.advice.map((item: string, index: number) => (
                  <motion.li
                    key={index}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: 2 + index * 0.1, duration: 0.5 }}
                    className="flex items-start gap-3 text-gray-800 text-base leading-relaxed"
                  >
                    <span className="flex-shrink-0 w-6 h-6 rounded-full bg-purple-200 flex items-center justify-center text-purple-700 font-medium mt-0.5">
                      {index + 1}
                    </span>
                    <span className="flex-1">{item}</span>
                  </motion.li>
                ))}
              </ul>
            </motion.div>
          )}

          {/* Í≥µÏú†ÏûêÍ∞Ä ÏûàÎã§Î©¥ */}
          {fromInfo && compatibility && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 2.3, duration: 0.5 }}
              className="mt-10 p-6 rounded-xl bg-gradient-to-br from-purple-50 to-purple-100 space-y-4"
            >
              <h2 className="text-xl text-center font-bold text-purple-700">
                {fromInfo.fromNickname}
                <span className="text-gray-500 font-normal text-lg">
                  ÎãòÍ≥ºÏùò Í∂ÅÌï©
                </span>
                <motion.div
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: 2.5, duration: 0.5 }}
                  className="text-2xl mt-2"
                >
                  &quot;{compatibility.title}&quot;
                </motion.div>
              </h2>
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 2.7, duration: 0.5 }}
                className="space-y-4"
              >
                <p className="text-center text-gray-800">
                  {compatibility.summary}
                </p>
                <div className="space-y-3 text-gray-700">
                  <div className="p-3 bg-white/50 rounded-lg">
                    <strong className="text-purple-600">Ïûò ÎßûÎäî Î∂ÄÎ∂Ñ:</strong>{" "}
                    {compatibility.good}
                  </div>
                  <div className="p-3 bg-white/50 rounded-lg">
                    <strong className="text-purple-600">Ï£ºÏùòÌï† Ï†ê:</strong>{" "}
                    {compatibility.caution}
                  </div>
                  <div className="p-3 bg-white/50 rounded-lg">
                    <strong className="text-purple-600">Ï°∞Ïñ∏:</strong>{" "}
                    {compatibility.advice}
                  </div>
                </div>
              </motion.div>
            </motion.div>
          )}

          {/* Îã§Ïãú ÌÖåÏä§Ìä∏ÌïòÍ∏∞ÏôÄ Ïù¥Î©îÏùº ÏûÖÎ†• ÏÑπÏÖò */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 3.4, duration: 0.5 }}
            className="mt-8 space-y-4"
          >
            <div className="text-center space-y-6">
              <div className="space-y-3">
                <h3 className="text-xl font-bold text-purple-700">
                  ü§î Í∞êÏ†ïÏùÑ Í≥µÏú†Ìï† ÏπúÍµ¨Îì§Í≥ºÏùò Í∂ÅÌï©Ïù¥ Í∂ÅÍ∏àÌïòÎã§Î©¥?
                </h3>
                <p className="text-gray-600">
                  Ïù¥Î©îÏùºÏùÑ ÎÇ®Í∏∞Í≥† ÏπúÍµ¨Îì§Í≥º ÌÖåÏä§Ìä∏ Í≤∞Í≥ºÎ•º Í≥µÏú†ÌïòÏÑ∏Ïöî!
                  <br />
                  <span className="text-purple-600 font-medium">
                    ÏπúÍµ¨Í∞Ä ÌÖåÏä§Ìä∏Ïóê Ï∞∏Ïó¨Ìï† ÎïåÎßàÎã§
                  </span>{" "}
                  Í∂ÅÌï© Í≤∞Í≥ºÎ•º Î≥¥ÎÇ¥ÎìúÎ†§Ïöî
                  <br />
                  (Ïä§Ìå∏Ìï®ÏùÑ Íº≠ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî!)
                </p>
              </div>
            </div>
            <ResultActions
              uuid={uuid}
              type={result?.type}
              nickname={nickname}
            />
          </motion.div>

          {/* Í≥µÏú† Î≤ÑÌäº ÏÑπÏÖò */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 3, duration: 0.5 }}
            className="mt-12 space-y-6"
          >
            <div className="relative">
              <div className="absolute -top-6 left-1/2 -translate-x-1/2">
                <motion.div
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  transition={{ delay: 3.2, duration: 0.5, type: "spring" }}
                  className="whitespace-nowrap bg-purple-600 text-white px-4 py-1 rounded-full text-sm font-medium shadow-lg"
                >
                  Share with friends! ‚ú®
                </motion.div>
              </div>
              <div className="bg-gradient-to-r from-purple-50 to-purple-100 rounded-2xl p-8 space-y-4">
                <div className="text-center space-y-3">
                  <h3 className="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-purple-600 to-purple-800">
                    ÏπúÍµ¨Îì§Í≥º Í≥µÏú†ÌïòÍ∏∞
                  </h3>
                  <div className="relative">
                    <div className="relative">
                      <p className="text-purple-600 font-medium bg-purple-50/80 px-6 py-3 rounded-xl inline-block shadow-sm">
                        SNSÎÇò ÎßÅÌÅ¨Î°ú Í≥µÏú†Ìï¥Î≥¥ÏÑ∏Ïöî! ‚ú®
                      </p>
                    </div>
                  </div>
                </div>
                <div className="grid grid-cols-2 sm:grid-cols-4 gap-3 mt-4 sm:mt-8 px-4 sm:px-0">
                  <motion.div
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <Button
                      variant="outline"
                      onClick={() => {
                        if (!nickname) {
                          setShowModal(true);
                          setPendingShareType("kakao");
                        } else {
                          handleShare("kakao");
                        }
                      }}
                      className="relative w-full bg-yellow-400 hover:bg-yellow-500 border-yellow-500 h-[52px] rounded-xl group"
                    >
                      <div className="relative flex flex-col items-center justify-center gap-1">
                        <Image
                          src="/icon_kakao.png"
                          alt="Ïπ¥Ïπ¥Ïò§ÌÜ° Í≥µÏú†"
                          width={24}
                          height={24}
                          className="transition-transform"
                          priority
                        />
                        <span className="text-[#3A1D1D] text-xs font-medium">
                          Ïπ¥Ïπ¥Ïò§ÌÜ°
                        </span>
                      </div>
                    </Button>
                  </motion.div>
                  <motion.div
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <Button
                      variant="outline"
                      onClick={() => {
                        if (!nickname) {
                          setShowModal(true);
                          setPendingShareType("link");
                        } else {
                          handleShare("link");
                        }
                      }}
                      className="relative w-full bg-white hover:bg-purple-50 border-purple-200 h-[52px] rounded-xl group"
                    >
                      <div className="relative flex flex-col items-center justify-center gap-1">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="24"
                          height="24"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="1.5"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="text-purple-600"
                        >
                          <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" />
                          <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" />
                        </svg>
                        <span className="text-purple-600 text-xs font-medium">
                          ÎßÅÌÅ¨ Î≥µÏÇ¨
                        </span>
                      </div>
                    </Button>
                  </motion.div>
                  <motion.div
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <Button
                      variant="outline"
                      onClick={() => {
                        if (!nickname) {
                          setShowModal(true);
                          setPendingShareType("twitter");
                        } else {
                          handleShare("twitter");
                        }
                      }}
                      className="relative w-full bg-black hover:bg-gray-900 border-gray-800 h-[52px] rounded-xl group"
                    >
                      <div className="relative flex flex-col items-center justify-center gap-1">
                        <svg
                          width="24"
                          height="24"
                          viewBox="0 0 24 24"
                          fill="none"
                        >
                          <path
                            d="M14.2833 10.1571L23.0508 0H20.9833L13.3666 8.85714L7.28327 0H0L9.15 13.3L0 23.8857H2.06751L10.0667 14.6L16.4833 23.8857H23.7666L14.2833 10.1571ZM11.1167 13.4143L10.2167 12.1571L2.83332 1.77143H6.33332L12.2667 10.0429L13.1667 11.3L20.9833 22.2H17.4833L11.1167 13.4143Z"
                            fill="white"
                          />
                        </svg>
                        <span className="text-white text-xs font-medium">
                          X (Ìä∏ÏúÑÌÑ∞)
                        </span>
                      </div>
                    </Button>
                  </motion.div>
                  <motion.div
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <Button
                      variant="outline"
                      onClick={() => {
                        if (!nickname) {
                          setShowModal(true);
                          setPendingShareType("instagram");
                        } else {
                          handleShare("instagram");
                        }
                      }}
                      className="relative w-full bg-gradient-to-br from-purple-600 via-pink-500 to-orange-400 hover:opacity-90 border-transparent h-[52px] rounded-xl group"
                    >
                      <div className="relative flex flex-col items-center justify-center gap-1">
                        <svg
                          width="24"
                          height="24"
                          viewBox="0 0 24 24"
                          fill="none"
                        >
                          <path
                            d="M12 2C14.717 2 15.056 2.01 16.122 2.06C17.187 2.11 17.912 2.277 18.55 2.525C19.21 2.779 19.766 3.123 20.322 3.678C20.8305 4.1779 21.224 4.78259 21.475 5.45C21.722 6.087 21.89 6.813 21.94 7.878C21.987 8.944 22 9.283 22 12C22 14.717 21.99 15.056 21.94 16.122C21.89 17.187 21.722 17.912 21.475 18.55C21.2247 19.2178 20.8311 19.8226 20.322 20.322C19.822 20.8303 19.2173 21.2238 18.55 21.475C17.913 21.722 17.187 21.89 16.122 21.94C15.056 21.987 14.717 22 12 22C9.283 22 8.944 21.99 7.878 21.94C6.813 21.89 6.088 21.722 5.45 21.475C4.78233 21.2245 4.17753 20.8309 3.678 20.322C3.16941 19.8222 2.77593 19.2175 2.525 18.55C2.277 17.913 2.11 17.187 2.06 16.122C2.013 15.056 2 14.717 2 12C2 9.283 2.01 8.944 2.06 7.878C2.11 6.812 2.277 6.088 2.525 5.45C2.77524 4.78218 3.1688 4.17732 3.678 3.678C4.17767 3.16923 4.78243 2.77573 5.45 2.525C6.088 2.277 6.812 2.11 7.878 2.06C8.944 2.013 9.283 2 12 2ZM12 7C10.6739 7 9.40215 7.52678 8.46447 8.46447C7.52678 9.40215 7 10.6739 7 12C7 13.3261 7.52678 14.5979 8.46447 15.5355C9.40215 16.4732 10.6739 17 12 17C13.3261 17 14.5979 16.4732 15.5355 15.5355C16.4732 14.5979 17 13.3261 17 12C17 10.6739 16.4732 9.40215 15.5355 8.46447C14.5979 7.52678 13.3261 7 12 7ZM18.5 6.75C18.5 6.41848 18.3683 6.10054 18.1339 5.86612C17.8995 5.6317 17.5815 5.5 17.25 5.5C16.9185 5.5 16.6005 5.6317 16.3661 5.86612C16.1317 6.10054 16 6.41848 16 6.75C16 7.08152 16.1317 7.39946 16.3661 7.63388C16.6005 7.8683 16.9185 8 17.25 8C17.5815 8 17.8995 7.8683 18.1339 7.63388C18.3683 7.39946 18.5 7.08152 18.5 6.75ZM12 9C12.7956 9 13.5587 9.31607 14.1213 9.87868C14.6839 10.4413 15 11.2044 15 12C15 12.7956 14.6839 13.5587 14.1213 14.1213C13.5587 14.6839 12.7956 15 12 15C11.2044 15 10.4413 14.6839 9.87868 14.1213C9.31607 13.5587 9 12.7956 9 12C9 11.2044 9.31607 10.4413 9.87868 9.87868C10.4413 9.31607 11.2044 9 12 9Z"
                            fill="white"
                          />
                        </svg>
                        <span className="text-white text-xs font-medium">
                          Ïù∏Ïä§ÌÉÄÍ∑∏Îû®
                        </span>
                      </div>
                    </Button>
                  </motion.div>
                </div>
              </div>
            </div>
            <button
              onClick={() => (window.location.href = "/quiz/q1")}
              className="w-full bg-gray-200 hover:bg-gray-300 text-black font-medium py-3 rounded-xl"
            >
              üîÑ Îã§Ïãú ÌÖåÏä§Ìä∏ÌïòÍ∏∞
            </button>
          </motion.div>
        </motion.div>
      </div>

      {showModal && (
        <NicknameModal
          isOpen={showModal}
          onClose={() => {
            closeModal();
            setPendingShareType(null);
          }}
          onConfirm={
            fromInfo
              ? confirmNickname
              : (nickname: string) => {
                  if (pendingShareType) {
                    confirmNicknameAndShare(nickname, pendingShareType);
                    setPendingShareType(null);
                  }
                }
          }
          isShared={!!fromInfo}
        />
      )}

      {/* Î°úÎî© Ïò§Î≤ÑÎ†àÏù¥ */}
      {isLoading && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/50 flex items-center justify-center z-[9999] backdrop-blur-sm"
        >
          <div className="bg-white rounded-xl shadow-xl p-6 flex flex-col items-center gap-4 min-w-[200px]">
            <div className="w-8 h-8 border-4 border-purple-600 border-t-transparent rounded-full animate-spin"></div>
            <p className="text-gray-700 font-medium">Ï≤òÎ¶¨Ï§ëÏûÖÎãàÎã§...</p>
          </div>
        </motion.div>
      )}
    </main>
  );
}
